/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461042257610daf8038038061001981610427565b9283398101906080818303126104225780516001600160401b038111610422578261004591830161044c565b602082015190926001600160401b0382116104225761006591830161044c565b9060408101519060ff82168203610422576060015183519091906001600160401b03811161032b57600354600181811c91168015610418575b602082101461030b57601f81116103b3575b50602094601f821160011461034c57948192939495600092610341575b50508160011b916000199060031b1c1916176003555b82516001600160401b03811161032b57600454600181811c91168015610321575b602082101461030b57601f81116102a6575b506020601f821160011461023f5781929394600092610234575b50508160011b916000199060031b1c1916176004555b331561021e5760055490336001600160a01b0383167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b03199091163360ff60a01b19161760a09190911b60ff60a01b161760055560025460009082810190811061020a5760025550336000526000602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a36040516108f790816104b88239f35b634e487b7160e01b82526011600452602482fd5b631e4fbdf760e01b600052600060045260246000fd5b015190503880610130565b601f198216906004600052806000209160005b81811061028e57509583600195969710610275575b505050811b01600455610146565b015160001960f88460031b161c19169055388080610267565b9192602060018192868b015181550194019201610252565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c81019160208410610301575b601f0160051c01905b8181106102f55750610116565b600081556001016102e8565b90915081906102df565b634e487b7160e01b600052602260045260246000fd5b90607f1690610104565b634e487b7160e01b600052604160045260246000fd5b0151905038806100cd565b601f198216956003600052806000209160005b88811061039b57508360019596979810610382575b505050811b016003556100e3565b015160001960f88460031b161c19169055388080610374565b9192602060018192868501518155019401920161035f565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c8101916020841061040e575b601f0160051c01905b81811061040257506100b0565b600081556001016103f5565b90915081906103ec565b90607f169061009e565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761032b57604052565b81601f82011215610422578051906001600160401b03821161032b5761047b601f8301601f1916602001610427565b92828452602083830101116104225760005b8281106104a257505060206000918301015290565b8060208092840101518282870101520161048d56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461068a57508063095ea7b31461060457806318160ddd146105e657806323b872dd146104f9578063313ce567146104d557806340c10f191461043357806370a08231146103f9578063715018a6146103ae5780638da5cb5b1461038557806395d89b41146102655780639dc29fac146101b8578063a9059cbb14610187578063dd62ed3e146101365763f2fde38b146100b957600080fd5b34610131576020366003190112610131576100d26107a5565b6100da610858565b6001600160a01b0316801561011b57600580546001600160a01b0319811683179091556001600160a01b0316600080516020610882833981519152600080a3005b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b346101315760403660031901126101315761014f6107a5565b6101576107bb565b6001600160a01b039182166000908152600160209081526040808320949093168252928352819020549051908152f35b34610131576040366003190112610131576101ad6101a36107a5565b60243590336107d1565b602060405160018152f35b34610131576040366003190112610131576101d16107a5565b602435906101dd610858565b6001600160a01b031690811561024f576000908282528160205260408220548181106102375760208285936000805160206108a283398151915293869787528684520360408620558060025403600255604051908152a380f35b60649363391434e360e21b8452600452602452604452fd5b634b637e8f60e11b600052600060045260246000fd5b346101315760003660031901126101315760405160006004548060011c9060018116801561037b575b6020831081146103675782855290811561034b57506001146102f4575b50819003601f01601f19168101906001600160401b038211818310176102de576102da8291826040528261075c565b0390f35b634e487b7160e01b600052604160045260246000fd5b600460009081529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828210610335575060209150820101826102ab565b6001816020925483858801015201910190610320565b90506020925060ff191682840152151560051b820101826102ab565b634e487b7160e01b84526022600452602484fd5b91607f169161028e565b34610131576000366003190112610131576005546040516001600160a01b039091168152602090f35b34610131576000366003190112610131576103c7610858565b600580546001600160a01b031981169091556000906001600160a01b03166000805160206108828339815191528280a3005b34610131576020366003190112610131576001600160a01b0361041a6107a5565b1660005260006020526020604060002054604051908152f35b346101315760403660031901126101315761044c6107a5565b60243590610458610858565b6001600160a01b031680156104bf57600254918083018093116104a9576020926002556000805160206108a2833981519152600093849284845283825260408420818154019055604051908152a380f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b3461013157600036600319011261013157602060ff60055460a01c16604051908152f35b34610131576060366003190112610131576105126107a5565b61051a6107bb565b6001600160a01b038216600081815260016020908152604080832033845290915290205490926044359291600019811061055a575b506101ad93506107d1565b8381106105c95784156105b357331561059d576101ad946000526001602052604060002060018060a01b033316600052602052836040600020910390558461054f565b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b8390637dc7a0d960e11b6000523360045260245260445260646000fd5b34610131576000366003190112610131576020600254604051908152f35b346101315760403660031901126101315761061d6107a5565b6024359033156105b3576001600160a01b031690811561059d57336000526001602052604060002082600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346101315760003660031901126101315760006003548060011c90600181168015610752575b6020831081146103675782855290811561034b57506001146106fb5750819003601f01601f19168101906001600160401b038211818310176102de576102da8291826040528261075c565b600360009081529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82821061073c575060209150820101826102ab565b6001816020925483858801015201910190610727565b91607f16916106b0565b91909160208152825180602083015260005b81811061078f575060409293506000838284010152601f8019910116010190565b806020809287010151604082860101520161076e565b600435906001600160a01b038216820361013157565b602435906001600160a01b038216820361013157565b6001600160a01b031690811561024f576001600160a01b03169182156104bf57600082815280602052604081205482811061083e5791604082826000805160206108a2833981519152958760209652828652038282205586815280845220818154019055604051908152a3565b916064928463391434e360e21b8452600452602452604452fd5b6005546001600160a01b0316330361086c57565b63118cdaa760e01b6000523360045260246000fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202df0abf895279ed3871cbc2d50da22a00ee9f64a92a299ad59eb5ab0103399a264736f6c634300081c0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    );
  }
  override deploy(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name,
      symbol,
      decimals_,
      initialSupply,
      overrides || {}
    ) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
