/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IMorphoBlue {
  export type MarketParamsStruct = {
    loanToken: AddressLike;
    collateralToken: AddressLike;
    oracle: AddressLike;
    irm: AddressLike;
    lltv: BigNumberish;
  };

  export type MarketParamsStructOutput = [
    loanToken: string,
    collateralToken: string,
    oracle: string,
    irm: string,
    lltv: bigint
  ] & {
    loanToken: string;
    collateralToken: string;
    oracle: string;
    irm: string;
    lltv: bigint;
  };
}

export declare namespace MillstoneAIVault {
  export type WithdrawRequestStruct = {
    token: AddressLike;
    amount: BigNumberish;
    requestTime: BigNumberish;
    protocolRequestId: BigNumberish;
    claimed: boolean;
    requester: AddressLike;
  };

  export type WithdrawRequestStructOutput = [
    token: string,
    amount: bigint,
    requestTime: bigint,
    protocolRequestId: bigint,
    claimed: boolean,
    requester: string
  ] & {
    token: string;
    amount: bigint;
    requestTime: bigint;
    protocolRequestId: bigint;
    claimed: boolean;
    requester: string;
  };
}

export interface MillstoneAIVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "aTokens"
      | "aavePool"
      | "addLendingProtocol"
      | "authorizedBridges"
      | "calculateYield"
      | "claimWithdraw"
      | "compareRates"
      | "depositToLendingProtocol"
      | "depositToSpecificProtocol"
      | "emergencyWithdraw"
      | "getAavePoolAddress"
      | "getLendingProtocols"
      | "getMorphoBorrowRate"
      | "getMorphoLensAddress"
      | "getMorphoPoolAddress"
      | "getMorphoSupplyRate"
      | "getTokenBalance"
      | "getTokenBalanceInProtocol"
      | "getTokenStats"
      | "getUserWithdrawRequests"
      | "getWithdrawRequestInfo"
      | "initialize"
      | "lendingProtocols"
      | "morphoBlue"
      | "morphoBlueMarkets"
      | "morphoLens"
      | "morphoMaxIterations"
      | "morphoPool"
      | "morphoVaults"
      | "nextRequestId"
      | "owner"
      | "pause"
      | "paused"
      | "principalSnapshots"
      | "protocolEnabled"
      | "proxiableUUID"
      | "receiveFromBridge"
      | "removeLendingProtocol"
      | "renounceOwnership"
      | "requestWithdraw"
      | "setATokenMapping"
      | "setAavePool"
      | "setBridgeAuthorization"
      | "setMorphoBlue"
      | "setMorphoBlueMarket"
      | "setMorphoLens"
      | "setMorphoMaxIterations"
      | "setMorphoPool"
      | "setMorphoVault"
      | "setSupportedToken"
      | "supportedTokens"
      | "toggleAaveMode"
      | "toggleDirectMorphoVaultMode"
      | "toggleMorphoBlueMode"
      | "toggleMorphoMode"
      | "totalDeposited"
      | "totalWithdrawn"
      | "transferOwnership"
      | "unpause"
      | "updateYieldSnapshot"
      | "upgradeToAndCall"
      | "useDirectMorphoVault"
      | "useMorphoBlue"
      | "useRealAave"
      | "useRealMorpho"
      | "userWithdrawRequests"
      | "withdrawRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AaveModeToggled"
      | "AavePoolSet"
      | "AaveTokenMapped"
      | "BridgeAuthorized"
      | "DirectMorphoVaultModeToggled"
      | "Initialized"
      | "LendingProtocolAdded"
      | "LendingProtocolEnabled"
      | "LendingProtocolRemoved"
      | "MorphoBlueMarketSet"
      | "MorphoBlueModeToggled"
      | "MorphoBlueSet"
      | "MorphoLensSet"
      | "MorphoMaxIterationsSet"
      | "MorphoModeToggled"
      | "MorphoPoolSet"
      | "MorphoVaultSet"
      | "OwnershipTransferred"
      | "Paused"
      | "TokenDeposited"
      | "TokenReceived"
      | "TokenSupported"
      | "Unpaused"
      | "Upgraded"
      | "WithdrawClaimed"
      | "WithdrawRequested"
      | "YieldCalculated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLendingProtocol",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBridges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYield",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compareRates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToLendingProtocol",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToSpecificProtocol",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingProtocols",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMorphoBorrowRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMorphoLensAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMorphoPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMorphoSupplyRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalanceInProtocol",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawRequestInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingProtocols",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoBlue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "morphoBlueMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoLens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "morphoMaxIterations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "morphoPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "morphoVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "principalSnapshots",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolEnabled",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFromBridge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLendingProtocol",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setATokenMapping",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAavePool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoBlue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoBlueMarket",
    values: [AddressLike, IMorphoBlue.MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoLens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoMaxIterations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAaveMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDirectMorphoVaultMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMorphoBlueMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMorphoMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateYieldSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useDirectMorphoVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useMorphoBlue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useRealAave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useRealMorpho",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLendingProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compareRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToLendingProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToSpecificProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMorphoBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMorphoLensAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMorphoPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMorphoSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalanceInProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morphoBlue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "morphoBlueMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morphoLens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "morphoMaxIterations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morphoPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "morphoVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "principalSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFromBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLendingProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setATokenMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoBlue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoBlueMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoLens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoMaxIterations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAaveMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDirectMorphoVaultMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMorphoBlueMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMorphoMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateYieldSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useDirectMorphoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useMorphoBlue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useRealAave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useRealMorpho",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequests",
    data: BytesLike
  ): Result;
}

export namespace AaveModeToggledEvent {
  export type InputTuple = [useRealAave: boolean];
  export type OutputTuple = [useRealAave: boolean];
  export interface OutputObject {
    useRealAave: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AavePoolSetEvent {
  export type InputTuple = [aavePool: AddressLike];
  export type OutputTuple = [aavePool: string];
  export interface OutputObject {
    aavePool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AaveTokenMappedEvent {
  export type InputTuple = [token: AddressLike, aToken: AddressLike];
  export type OutputTuple = [token: string, aToken: string];
  export interface OutputObject {
    token: string;
    aToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeAuthorizedEvent {
  export type InputTuple = [bridge: AddressLike, authorized: boolean];
  export type OutputTuple = [bridge: string, authorized: boolean];
  export interface OutputObject {
    bridge: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectMorphoVaultModeToggledEvent {
  export type InputTuple = [useDirectMorphoVault: boolean];
  export type OutputTuple = [useDirectMorphoVault: boolean];
  export interface OutputObject {
    useDirectMorphoVault: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingProtocolAddedEvent {
  export type InputTuple = [token: AddressLike, protocol: AddressLike];
  export type OutputTuple = [token: string, protocol: string];
  export interface OutputObject {
    token: string;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingProtocolEnabledEvent {
  export type InputTuple = [
    token: AddressLike,
    protocol: AddressLike,
    enabled: boolean
  ];
  export type OutputTuple = [token: string, protocol: string, enabled: boolean];
  export interface OutputObject {
    token: string;
    protocol: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingProtocolRemovedEvent {
  export type InputTuple = [token: AddressLike, protocol: AddressLike];
  export type OutputTuple = [token: string, protocol: string];
  export interface OutputObject {
    token: string;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoBlueMarketSetEvent {
  export type InputTuple = [
    token: AddressLike,
    marketParams: IMorphoBlue.MarketParamsStruct
  ];
  export type OutputTuple = [
    token: string,
    marketParams: IMorphoBlue.MarketParamsStructOutput
  ];
  export interface OutputObject {
    token: string;
    marketParams: IMorphoBlue.MarketParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoBlueModeToggledEvent {
  export type InputTuple = [useMorphoBlue: boolean];
  export type OutputTuple = [useMorphoBlue: boolean];
  export interface OutputObject {
    useMorphoBlue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoBlueSetEvent {
  export type InputTuple = [morphoBlue: AddressLike];
  export type OutputTuple = [morphoBlue: string];
  export interface OutputObject {
    morphoBlue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoLensSetEvent {
  export type InputTuple = [morphoLens: AddressLike];
  export type OutputTuple = [morphoLens: string];
  export interface OutputObject {
    morphoLens: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoMaxIterationsSetEvent {
  export type InputTuple = [maxIterations: BigNumberish];
  export type OutputTuple = [maxIterations: bigint];
  export interface OutputObject {
    maxIterations: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoModeToggledEvent {
  export type InputTuple = [useRealMorpho: boolean];
  export type OutputTuple = [useRealMorpho: boolean];
  export interface OutputObject {
    useRealMorpho: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoPoolSetEvent {
  export type InputTuple = [morphoPool: AddressLike];
  export type OutputTuple = [morphoPool: string];
  export interface OutputObject {
    morphoPool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MorphoVaultSetEvent {
  export type InputTuple = [token: AddressLike, vault: AddressLike];
  export type OutputTuple = [token: string, vault: string];
  export interface OutputObject {
    token: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDepositedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    protocol: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, protocol: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenReceivedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    from: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, from: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSupportedEvent {
  export type InputTuple = [token: AddressLike, supported: boolean];
  export type OutputTuple = [token: string, supported: boolean];
  export interface OutputObject {
    token: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawClaimedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    token: string,
    amount: bigint,
    requester: string
  ];
  export interface OutputObject {
    requestId: bigint;
    token: string;
    amount: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    token: string,
    amount: bigint,
    requester: string
  ];
  export interface OutputObject {
    requestId: bigint;
    token: string;
    amount: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldCalculatedEvent {
  export type InputTuple = [
    token: AddressLike,
    totalValue: BigNumberish,
    principal: BigNumberish,
    yield_: BigNumberish,
    yieldRate: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    totalValue: bigint,
    principal: bigint,
    yield_: bigint,
    yieldRate: bigint
  ];
  export interface OutputObject {
    token: string;
    totalValue: bigint;
    principal: bigint;
    yield: bigint;
    yieldRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MillstoneAIVault extends BaseContract {
  connect(runner?: ContractRunner | null): MillstoneAIVault;
  waitForDeployment(): Promise<this>;

  interface: MillstoneAIVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  aTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  aavePool: TypedContractMethod<[], [string], "view">;

  addLendingProtocol: TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedBridges: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  calculateYield: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        principal: bigint;
        yieldAmount: bigint;
        yieldRate: bigint;
      }
    ],
    "view"
  >;

  claimWithdraw: TypedContractMethod<
    [requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  compareRates: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        aaveRate: bigint;
        morphoRate: bigint;
        betterProtocol: bigint;
      }
    ],
    "view"
  >;

  depositToLendingProtocol: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositToSpecificProtocol: TypedContractMethod<
    [token: AddressLike, protocol: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAavePoolAddress: TypedContractMethod<[], [string], "view">;

  getLendingProtocols: TypedContractMethod<
    [token: AddressLike],
    [string[]],
    "view"
  >;

  getMorphoBorrowRate: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getMorphoLensAddress: TypedContractMethod<[], [string], "view">;

  getMorphoPoolAddress: TypedContractMethod<[], [string], "view">;

  getMorphoSupplyRate: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTokenBalance: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        contractBalance: bigint;
        protocolBalance: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getTokenBalanceInProtocol: TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [bigint],
    "view"
  >;

  getTokenStats: TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { deposited: bigint; withdrawn: bigint }],
    "view"
  >;

  getUserWithdrawRequests: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getWithdrawRequestInfo: TypedContractMethod<
    [requestId: BigNumberish],
    [
      [MillstoneAIVault.WithdrawRequestStructOutput, boolean, bigint] & {
        request: MillstoneAIVault.WithdrawRequestStructOutput;
        isReady: boolean;
        claimableTime: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  lendingProtocols: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  morphoBlue: TypedContractMethod<[], [string], "view">;

  morphoBlueMarkets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, bigint] & {
        loanToken: string;
        collateralToken: string;
        oracle: string;
        irm: string;
        lltv: bigint;
      }
    ],
    "view"
  >;

  morphoLens: TypedContractMethod<[], [string], "view">;

  morphoMaxIterations: TypedContractMethod<[], [bigint], "view">;

  morphoPool: TypedContractMethod<[], [string], "view">;

  morphoVaults: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  nextRequestId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  principalSnapshots: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  protocolEnabled: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  receiveFromBridge: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeLendingProtocol: TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setATokenMapping: TypedContractMethod<
    [token: AddressLike, aToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setAavePool: TypedContractMethod<
    [_aavePool: AddressLike],
    [void],
    "nonpayable"
  >;

  setBridgeAuthorization: TypedContractMethod<
    [bridge: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setMorphoBlue: TypedContractMethod<
    [_morphoBlue: AddressLike],
    [void],
    "nonpayable"
  >;

  setMorphoBlueMarket: TypedContractMethod<
    [token: AddressLike, marketParams: IMorphoBlue.MarketParamsStruct],
    [void],
    "nonpayable"
  >;

  setMorphoLens: TypedContractMethod<
    [_morphoLens: AddressLike],
    [void],
    "nonpayable"
  >;

  setMorphoMaxIterations: TypedContractMethod<
    [_maxIterations: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMorphoPool: TypedContractMethod<
    [_morphoPool: AddressLike],
    [void],
    "nonpayable"
  >;

  setMorphoVault: TypedContractMethod<
    [token: AddressLike, vault: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupportedToken: TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  toggleAaveMode: TypedContractMethod<
    [_useRealAave: boolean],
    [void],
    "nonpayable"
  >;

  toggleDirectMorphoVaultMode: TypedContractMethod<
    [_useDirectMorphoVault: boolean],
    [void],
    "nonpayable"
  >;

  toggleMorphoBlueMode: TypedContractMethod<
    [_useMorphoBlue: boolean],
    [void],
    "nonpayable"
  >;

  toggleMorphoMode: TypedContractMethod<
    [_useRealMorpho: boolean],
    [void],
    "nonpayable"
  >;

  totalDeposited: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalWithdrawn: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateYieldSnapshot: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  useDirectMorphoVault: TypedContractMethod<[], [boolean], "view">;

  useMorphoBlue: TypedContractMethod<[], [boolean], "view">;

  useRealAave: TypedContractMethod<[], [boolean], "view">;

  useRealMorpho: TypedContractMethod<[], [boolean], "view">;

  userWithdrawRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, string] & {
        token: string;
        amount: bigint;
        requestTime: bigint;
        protocolRequestId: bigint;
        claimed: boolean;
        requester: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aTokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLendingProtocol"
  ): TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedBridges"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateYield"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        principal: bigint;
        yieldAmount: bigint;
        yieldRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimWithdraw"
  ): TypedContractMethod<[requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "compareRates"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        aaveRate: bigint;
        morphoRate: bigint;
        betterProtocol: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositToLendingProtocol"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToSpecificProtocol"
  ): TypedContractMethod<
    [token: AddressLike, protocol: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAavePoolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLendingProtocols"
  ): TypedContractMethod<[token: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMorphoBorrowRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMorphoLensAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMorphoPoolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMorphoSupplyRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        contractBalance: bigint;
        protocolBalance: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenBalanceInProtocol"
  ): TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenStats"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { deposited: bigint; withdrawn: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserWithdrawRequests"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWithdrawRequestInfo"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [
      [MillstoneAIVault.WithdrawRequestStructOutput, boolean, bigint] & {
        request: MillstoneAIVault.WithdrawRequestStructOutput;
        isReady: boolean;
        claimableTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lendingProtocols"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "morphoBlue"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "morphoBlueMarkets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, string, bigint] & {
        loanToken: string;
        collateralToken: string;
        oracle: string;
        irm: string;
        lltv: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "morphoLens"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "morphoMaxIterations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "morphoPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "morphoVaults"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nextRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "principalSnapshots"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolEnabled"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveFromBridge"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLendingProtocol"
  ): TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setATokenMapping"
  ): TypedContractMethod<
    [token: AddressLike, aToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAavePool"
  ): TypedContractMethod<[_aavePool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBridgeAuthorization"
  ): TypedContractMethod<
    [bridge: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMorphoBlue"
  ): TypedContractMethod<[_morphoBlue: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMorphoBlueMarket"
  ): TypedContractMethod<
    [token: AddressLike, marketParams: IMorphoBlue.MarketParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMorphoLens"
  ): TypedContractMethod<[_morphoLens: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMorphoMaxIterations"
  ): TypedContractMethod<[_maxIterations: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMorphoPool"
  ): TypedContractMethod<[_morphoPool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMorphoVault"
  ): TypedContractMethod<
    [token: AddressLike, vault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedToken"
  ): TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "toggleAaveMode"
  ): TypedContractMethod<[_useRealAave: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleDirectMorphoVaultMode"
  ): TypedContractMethod<
    [_useDirectMorphoVault: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleMorphoBlueMode"
  ): TypedContractMethod<[_useMorphoBlue: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleMorphoMode"
  ): TypedContractMethod<[_useRealMorpho: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateYieldSnapshot"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "useDirectMorphoVault"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "useMorphoBlue"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "useRealAave"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "useRealMorpho"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "userWithdrawRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, string] & {
        token: string;
        amount: bigint;
        requestTime: bigint;
        protocolRequestId: bigint;
        claimed: boolean;
        requester: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AaveModeToggled"
  ): TypedContractEvent<
    AaveModeToggledEvent.InputTuple,
    AaveModeToggledEvent.OutputTuple,
    AaveModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "AavePoolSet"
  ): TypedContractEvent<
    AavePoolSetEvent.InputTuple,
    AavePoolSetEvent.OutputTuple,
    AavePoolSetEvent.OutputObject
  >;
  getEvent(
    key: "AaveTokenMapped"
  ): TypedContractEvent<
    AaveTokenMappedEvent.InputTuple,
    AaveTokenMappedEvent.OutputTuple,
    AaveTokenMappedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeAuthorized"
  ): TypedContractEvent<
    BridgeAuthorizedEvent.InputTuple,
    BridgeAuthorizedEvent.OutputTuple,
    BridgeAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "DirectMorphoVaultModeToggled"
  ): TypedContractEvent<
    DirectMorphoVaultModeToggledEvent.InputTuple,
    DirectMorphoVaultModeToggledEvent.OutputTuple,
    DirectMorphoVaultModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LendingProtocolAdded"
  ): TypedContractEvent<
    LendingProtocolAddedEvent.InputTuple,
    LendingProtocolAddedEvent.OutputTuple,
    LendingProtocolAddedEvent.OutputObject
  >;
  getEvent(
    key: "LendingProtocolEnabled"
  ): TypedContractEvent<
    LendingProtocolEnabledEvent.InputTuple,
    LendingProtocolEnabledEvent.OutputTuple,
    LendingProtocolEnabledEvent.OutputObject
  >;
  getEvent(
    key: "LendingProtocolRemoved"
  ): TypedContractEvent<
    LendingProtocolRemovedEvent.InputTuple,
    LendingProtocolRemovedEvent.OutputTuple,
    LendingProtocolRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MorphoBlueMarketSet"
  ): TypedContractEvent<
    MorphoBlueMarketSetEvent.InputTuple,
    MorphoBlueMarketSetEvent.OutputTuple,
    MorphoBlueMarketSetEvent.OutputObject
  >;
  getEvent(
    key: "MorphoBlueModeToggled"
  ): TypedContractEvent<
    MorphoBlueModeToggledEvent.InputTuple,
    MorphoBlueModeToggledEvent.OutputTuple,
    MorphoBlueModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "MorphoBlueSet"
  ): TypedContractEvent<
    MorphoBlueSetEvent.InputTuple,
    MorphoBlueSetEvent.OutputTuple,
    MorphoBlueSetEvent.OutputObject
  >;
  getEvent(
    key: "MorphoLensSet"
  ): TypedContractEvent<
    MorphoLensSetEvent.InputTuple,
    MorphoLensSetEvent.OutputTuple,
    MorphoLensSetEvent.OutputObject
  >;
  getEvent(
    key: "MorphoMaxIterationsSet"
  ): TypedContractEvent<
    MorphoMaxIterationsSetEvent.InputTuple,
    MorphoMaxIterationsSetEvent.OutputTuple,
    MorphoMaxIterationsSetEvent.OutputObject
  >;
  getEvent(
    key: "MorphoModeToggled"
  ): TypedContractEvent<
    MorphoModeToggledEvent.InputTuple,
    MorphoModeToggledEvent.OutputTuple,
    MorphoModeToggledEvent.OutputObject
  >;
  getEvent(
    key: "MorphoPoolSet"
  ): TypedContractEvent<
    MorphoPoolSetEvent.InputTuple,
    MorphoPoolSetEvent.OutputTuple,
    MorphoPoolSetEvent.OutputObject
  >;
  getEvent(
    key: "MorphoVaultSet"
  ): TypedContractEvent<
    MorphoVaultSetEvent.InputTuple,
    MorphoVaultSetEvent.OutputTuple,
    MorphoVaultSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeposited"
  ): TypedContractEvent<
    TokenDepositedEvent.InputTuple,
    TokenDepositedEvent.OutputTuple,
    TokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokenReceived"
  ): TypedContractEvent<
    TokenReceivedEvent.InputTuple,
    TokenReceivedEvent.OutputTuple,
    TokenReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSupported"
  ): TypedContractEvent<
    TokenSupportedEvent.InputTuple,
    TokenSupportedEvent.OutputTuple,
    TokenSupportedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawClaimed"
  ): TypedContractEvent<
    WithdrawClaimedEvent.InputTuple,
    WithdrawClaimedEvent.OutputTuple,
    WithdrawClaimedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequested"
  ): TypedContractEvent<
    WithdrawRequestedEvent.InputTuple,
    WithdrawRequestedEvent.OutputTuple,
    WithdrawRequestedEvent.OutputObject
  >;
  getEvent(
    key: "YieldCalculated"
  ): TypedContractEvent<
    YieldCalculatedEvent.InputTuple,
    YieldCalculatedEvent.OutputTuple,
    YieldCalculatedEvent.OutputObject
  >;

  filters: {
    "AaveModeToggled(bool)": TypedContractEvent<
      AaveModeToggledEvent.InputTuple,
      AaveModeToggledEvent.OutputTuple,
      AaveModeToggledEvent.OutputObject
    >;
    AaveModeToggled: TypedContractEvent<
      AaveModeToggledEvent.InputTuple,
      AaveModeToggledEvent.OutputTuple,
      AaveModeToggledEvent.OutputObject
    >;

    "AavePoolSet(address)": TypedContractEvent<
      AavePoolSetEvent.InputTuple,
      AavePoolSetEvent.OutputTuple,
      AavePoolSetEvent.OutputObject
    >;
    AavePoolSet: TypedContractEvent<
      AavePoolSetEvent.InputTuple,
      AavePoolSetEvent.OutputTuple,
      AavePoolSetEvent.OutputObject
    >;

    "AaveTokenMapped(address,address)": TypedContractEvent<
      AaveTokenMappedEvent.InputTuple,
      AaveTokenMappedEvent.OutputTuple,
      AaveTokenMappedEvent.OutputObject
    >;
    AaveTokenMapped: TypedContractEvent<
      AaveTokenMappedEvent.InputTuple,
      AaveTokenMappedEvent.OutputTuple,
      AaveTokenMappedEvent.OutputObject
    >;

    "BridgeAuthorized(address,bool)": TypedContractEvent<
      BridgeAuthorizedEvent.InputTuple,
      BridgeAuthorizedEvent.OutputTuple,
      BridgeAuthorizedEvent.OutputObject
    >;
    BridgeAuthorized: TypedContractEvent<
      BridgeAuthorizedEvent.InputTuple,
      BridgeAuthorizedEvent.OutputTuple,
      BridgeAuthorizedEvent.OutputObject
    >;

    "DirectMorphoVaultModeToggled(bool)": TypedContractEvent<
      DirectMorphoVaultModeToggledEvent.InputTuple,
      DirectMorphoVaultModeToggledEvent.OutputTuple,
      DirectMorphoVaultModeToggledEvent.OutputObject
    >;
    DirectMorphoVaultModeToggled: TypedContractEvent<
      DirectMorphoVaultModeToggledEvent.InputTuple,
      DirectMorphoVaultModeToggledEvent.OutputTuple,
      DirectMorphoVaultModeToggledEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LendingProtocolAdded(address,address)": TypedContractEvent<
      LendingProtocolAddedEvent.InputTuple,
      LendingProtocolAddedEvent.OutputTuple,
      LendingProtocolAddedEvent.OutputObject
    >;
    LendingProtocolAdded: TypedContractEvent<
      LendingProtocolAddedEvent.InputTuple,
      LendingProtocolAddedEvent.OutputTuple,
      LendingProtocolAddedEvent.OutputObject
    >;

    "LendingProtocolEnabled(address,address,bool)": TypedContractEvent<
      LendingProtocolEnabledEvent.InputTuple,
      LendingProtocolEnabledEvent.OutputTuple,
      LendingProtocolEnabledEvent.OutputObject
    >;
    LendingProtocolEnabled: TypedContractEvent<
      LendingProtocolEnabledEvent.InputTuple,
      LendingProtocolEnabledEvent.OutputTuple,
      LendingProtocolEnabledEvent.OutputObject
    >;

    "LendingProtocolRemoved(address,address)": TypedContractEvent<
      LendingProtocolRemovedEvent.InputTuple,
      LendingProtocolRemovedEvent.OutputTuple,
      LendingProtocolRemovedEvent.OutputObject
    >;
    LendingProtocolRemoved: TypedContractEvent<
      LendingProtocolRemovedEvent.InputTuple,
      LendingProtocolRemovedEvent.OutputTuple,
      LendingProtocolRemovedEvent.OutputObject
    >;

    "MorphoBlueMarketSet(address,tuple)": TypedContractEvent<
      MorphoBlueMarketSetEvent.InputTuple,
      MorphoBlueMarketSetEvent.OutputTuple,
      MorphoBlueMarketSetEvent.OutputObject
    >;
    MorphoBlueMarketSet: TypedContractEvent<
      MorphoBlueMarketSetEvent.InputTuple,
      MorphoBlueMarketSetEvent.OutputTuple,
      MorphoBlueMarketSetEvent.OutputObject
    >;

    "MorphoBlueModeToggled(bool)": TypedContractEvent<
      MorphoBlueModeToggledEvent.InputTuple,
      MorphoBlueModeToggledEvent.OutputTuple,
      MorphoBlueModeToggledEvent.OutputObject
    >;
    MorphoBlueModeToggled: TypedContractEvent<
      MorphoBlueModeToggledEvent.InputTuple,
      MorphoBlueModeToggledEvent.OutputTuple,
      MorphoBlueModeToggledEvent.OutputObject
    >;

    "MorphoBlueSet(address)": TypedContractEvent<
      MorphoBlueSetEvent.InputTuple,
      MorphoBlueSetEvent.OutputTuple,
      MorphoBlueSetEvent.OutputObject
    >;
    MorphoBlueSet: TypedContractEvent<
      MorphoBlueSetEvent.InputTuple,
      MorphoBlueSetEvent.OutputTuple,
      MorphoBlueSetEvent.OutputObject
    >;

    "MorphoLensSet(address)": TypedContractEvent<
      MorphoLensSetEvent.InputTuple,
      MorphoLensSetEvent.OutputTuple,
      MorphoLensSetEvent.OutputObject
    >;
    MorphoLensSet: TypedContractEvent<
      MorphoLensSetEvent.InputTuple,
      MorphoLensSetEvent.OutputTuple,
      MorphoLensSetEvent.OutputObject
    >;

    "MorphoMaxIterationsSet(uint256)": TypedContractEvent<
      MorphoMaxIterationsSetEvent.InputTuple,
      MorphoMaxIterationsSetEvent.OutputTuple,
      MorphoMaxIterationsSetEvent.OutputObject
    >;
    MorphoMaxIterationsSet: TypedContractEvent<
      MorphoMaxIterationsSetEvent.InputTuple,
      MorphoMaxIterationsSetEvent.OutputTuple,
      MorphoMaxIterationsSetEvent.OutputObject
    >;

    "MorphoModeToggled(bool)": TypedContractEvent<
      MorphoModeToggledEvent.InputTuple,
      MorphoModeToggledEvent.OutputTuple,
      MorphoModeToggledEvent.OutputObject
    >;
    MorphoModeToggled: TypedContractEvent<
      MorphoModeToggledEvent.InputTuple,
      MorphoModeToggledEvent.OutputTuple,
      MorphoModeToggledEvent.OutputObject
    >;

    "MorphoPoolSet(address)": TypedContractEvent<
      MorphoPoolSetEvent.InputTuple,
      MorphoPoolSetEvent.OutputTuple,
      MorphoPoolSetEvent.OutputObject
    >;
    MorphoPoolSet: TypedContractEvent<
      MorphoPoolSetEvent.InputTuple,
      MorphoPoolSetEvent.OutputTuple,
      MorphoPoolSetEvent.OutputObject
    >;

    "MorphoVaultSet(address,address)": TypedContractEvent<
      MorphoVaultSetEvent.InputTuple,
      MorphoVaultSetEvent.OutputTuple,
      MorphoVaultSetEvent.OutputObject
    >;
    MorphoVaultSet: TypedContractEvent<
      MorphoVaultSetEvent.InputTuple,
      MorphoVaultSetEvent.OutputTuple,
      MorphoVaultSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TokenDeposited(address,uint256,address)": TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
    TokenDeposited: TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;

    "TokenReceived(address,uint256,address)": TypedContractEvent<
      TokenReceivedEvent.InputTuple,
      TokenReceivedEvent.OutputTuple,
      TokenReceivedEvent.OutputObject
    >;
    TokenReceived: TypedContractEvent<
      TokenReceivedEvent.InputTuple,
      TokenReceivedEvent.OutputTuple,
      TokenReceivedEvent.OutputObject
    >;

    "TokenSupported(address,bool)": TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
    TokenSupported: TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawClaimed(uint256,address,uint256,address)": TypedContractEvent<
      WithdrawClaimedEvent.InputTuple,
      WithdrawClaimedEvent.OutputTuple,
      WithdrawClaimedEvent.OutputObject
    >;
    WithdrawClaimed: TypedContractEvent<
      WithdrawClaimedEvent.InputTuple,
      WithdrawClaimedEvent.OutputTuple,
      WithdrawClaimedEvent.OutputObject
    >;

    "WithdrawRequested(uint256,address,uint256,address)": TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;
    WithdrawRequested: TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;

    "YieldCalculated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      YieldCalculatedEvent.InputTuple,
      YieldCalculatedEvent.OutputTuple,
      YieldCalculatedEvent.OutputObject
    >;
    YieldCalculated: TypedContractEvent<
      YieldCalculatedEvent.InputTuple,
      YieldCalculatedEvent.OutputTuple,
      YieldCalculatedEvent.OutputObject
    >;
  };
}
