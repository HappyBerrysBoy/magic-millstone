/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MillstoneAIVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_RATE_INCREASE_LIMIT"
      | "UPGRADE_INTERFACE_VERSION"
      | "_withdrawFromAave"
      | "_withdrawFromMorpho"
      | "aTokens"
      | "aaveAllocations"
      | "aavePool"
      | "accumulatedFees"
      | "applyPendingRateImmediately"
      | "authorizedBridges"
      | "bridgeDailyLimits"
      | "bridgeDailyUsed"
      | "bridgeEmergencyPause"
      | "bridgeLastResetTime"
      | "calculateNetYield"
      | "calculateYield"
      | "cancelPendingRate"
      | "deposit"
      | "exchangeRateStakedToUnderlying"
      | "feeRecipient"
      | "getAllocations"
      | "getBridgeSecurityStatus"
      | "getExchangeRate"
      | "getFeeInfo"
      | "getPendingRateInfo"
      | "getProtocolBalances"
      | "getSecurityStatus"
      | "getStakedTokenBalance"
      | "getStakedTokenInfo"
      | "getTokenStats"
      | "getTotalStakedTokenSupply"
      | "getTotalValue"
      | "getUserInfo"
      | "initialize"
      | "lastRateUpdateTime"
      | "lastRecordedValue"
      | "maxDailyRateIncrease"
      | "morphoAllocations"
      | "morphoVaults"
      | "owner"
      | "pendingRateIncrease"
      | "performanceFeeRate"
      | "previewDeposit"
      | "previewRedeem"
      | "proxiableUUID"
      | "queueExchangeRateIncrease"
      | "queueTimelockOperation"
      | "rateIncreaseStartTime"
      | "rebalance"
      | "receiveFromBridge"
      | "redeem"
      | "renounceOwnership"
      | "setAaveConfig"
      | "setBridgeAuthorization"
      | "setBridgeEmergencyPause"
      | "setBridgeLimit"
      | "setFeeRecipient"
      | "setMaxRateIncrease"
      | "setMorphoVault"
      | "setPerformanceFeeRate"
      | "setProtocolAllocations"
      | "setSupportedToken"
      | "setTimelockDelay"
      | "simulateExchangeRateUpdate"
      | "supportedTokens"
      | "timelockDelay"
      | "timelockOperations"
      | "totalDeposited"
      | "totalFeesWithdrawn"
      | "totalStakedTokenSupply"
      | "totalUnderlyingDeposited"
      | "totalWithdrawn"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "userStakedTokenBalance"
      | "withdrawAllFees"
      | "withdrawForUser"
      | "withdrawPerformanceFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllocationSet"
      | "BridgeEmergencyPause"
      | "BridgeLimitSet"
      | "ExchangeRateUpdated"
      | "FeeRecipientSet"
      | "Initialized"
      | "MaxRateIncreaseSet"
      | "OwnershipTransferred"
      | "PerformanceFeeCollected"
      | "PerformanceFeeSet"
      | "PerformanceFeeWithdrawn"
      | "ProtocolDeposit"
      | "ProtocolWithdrawalFailed"
      | "RateIncreaseQueued"
      | "StakedTokenBurned"
      | "StakedTokenMinted"
      | "TimelockOperationExecuted"
      | "TimelockOperationQueued"
      | "TokenSupported"
      | "Upgraded"
      | "WithdrawalDebug"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_RATE_INCREASE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_withdrawFromAave",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdrawFromMorpho",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "aaveAllocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accumulatedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "applyPendingRateImmediately",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBridges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeDailyLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeDailyUsed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeEmergencyPause",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeLastResetTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNetYield",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYield",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPendingRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStakedToUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeSecurityStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRateInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokenBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokenInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedTokenSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRateUpdateTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecordedValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDailyRateIncrease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoAllocations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "morphoVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRateIncrease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueExchangeRateIncrease",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queueTimelockOperation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIncreaseStartTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFromBridge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAaveConfig",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeEmergencyPause",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRateIncrease",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMorphoVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolAllocations",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelockDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExchangeRateUpdate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockOperations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesWithdrawn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedTokenSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingDeposited",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakedTokenBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPerformanceFee",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_RATE_INCREASE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_withdrawFromAave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_withdrawFromMorpho",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aaveAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyPendingRateImmediately",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeDailyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeDailyUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeLastResetTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNetYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStakedToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeSecurityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRateUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecordedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDailyRateIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "morphoVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRateIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueExchangeRateIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueTimelockOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIncreaseStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveFromBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAaveConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRateIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMorphoVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExchangeRateUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakedTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPerformanceFee",
    data: BytesLike
  ): Result;
}

export namespace AllocationSetEvent {
  export type InputTuple = [
    token: AddressLike,
    aavePercentage: BigNumberish,
    morphoPercentage: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    aavePercentage: bigint,
    morphoPercentage: bigint
  ];
  export interface OutputObject {
    token: string;
    aavePercentage: bigint;
    morphoPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeEmergencyPauseEvent {
  export type InputTuple = [bridge: AddressLike, paused: boolean];
  export type OutputTuple = [bridge: string, paused: boolean];
  export interface OutputObject {
    bridge: string;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeLimitSetEvent {
  export type InputTuple = [bridge: AddressLike, dailyLimit: BigNumberish];
  export type OutputTuple = [bridge: string, dailyLimit: bigint];
  export interface OutputObject {
    bridge: string;
    dailyLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeRateUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    newRate: BigNumberish,
    previousRate: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    newRate: bigint,
    previousRate: bigint
  ];
  export interface OutputObject {
    token: string;
    newRate: bigint;
    previousRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientSetEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxRateIncreaseSetEvent {
  export type InputTuple = [token: AddressLike, newMaxIncrease: BigNumberish];
  export type OutputTuple = [token: string, newMaxIncrease: bigint];
  export interface OutputObject {
    token: string;
    newMaxIncrease: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeCollectedEvent {
  export type InputTuple = [token: AddressLike, feeAmount: BigNumberish];
  export type OutputTuple = [token: string, feeAmount: bigint];
  export interface OutputObject {
    token: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeSetEvent {
  export type InputTuple = [newFeeRate: BigNumberish];
  export type OutputTuple = [newFeeRate: bigint];
  export interface OutputObject {
    newFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, recipient: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolDepositEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    protocol: string
  ];
  export type OutputTuple = [token: string, amount: bigint, protocol: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolWithdrawalFailedEvent {
  export type InputTuple = [
    token: AddressLike,
    protocol: string,
    requestedAmount: BigNumberish,
    actualAmount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    protocol: string,
    requestedAmount: bigint,
    actualAmount: bigint
  ];
  export interface OutputObject {
    token: string;
    protocol: string;
    requestedAmount: bigint;
    actualAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateIncreaseQueuedEvent {
  export type InputTuple = [
    token: AddressLike,
    targetRate: BigNumberish,
    executeTime: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    targetRate: bigint,
    executeTime: bigint
  ];
  export interface OutputObject {
    token: string;
    targetRate: bigint;
    executeTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedTokenBurnedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    stakedTokenAmount: BigNumberish,
    underlyingAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    stakedTokenAmount: bigint,
    underlyingAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    stakedTokenAmount: bigint;
    underlyingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedTokenMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    stakedTokenAmount: BigNumberish,
    underlyingAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    stakedTokenAmount: bigint,
    underlyingAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    stakedTokenAmount: bigint;
    underlyingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockOperationExecutedEvent {
  export type InputTuple = [operationHash: BytesLike];
  export type OutputTuple = [operationHash: string];
  export interface OutputObject {
    operationHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockOperationQueuedEvent {
  export type InputTuple = [
    operationHash: BytesLike,
    executeTime: BigNumberish
  ];
  export type OutputTuple = [operationHash: string, executeTime: bigint];
  export interface OutputObject {
    operationHash: string;
    executeTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSupportedEvent {
  export type InputTuple = [token: AddressLike, supported: boolean];
  export type OutputTuple = [token: string, supported: boolean];
  export interface OutputObject {
    token: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalDebugEvent {
  export type InputTuple = [
    token: AddressLike,
    requestedAmount: BigNumberish,
    aaveAmount: BigNumberish,
    morphoAmount: BigNumberish,
    totalWithdrawn: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    requestedAmount: bigint,
    aaveAmount: bigint,
    morphoAmount: bigint,
    totalWithdrawn: bigint
  ];
  export interface OutputObject {
    token: string;
    requestedAmount: bigint;
    aaveAmount: bigint;
    morphoAmount: bigint;
    totalWithdrawn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MillstoneAIVault extends BaseContract {
  connect(runner?: ContractRunner | null): MillstoneAIVault;
  waitForDeployment(): Promise<this>;

  interface: MillstoneAIVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_RATE_INCREASE_LIMIT: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  _withdrawFromAave: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _withdrawFromMorpho: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  aTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  aaveAllocations: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  aavePool: TypedContractMethod<[], [string], "view">;

  accumulatedFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  applyPendingRateImmediately: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedBridges: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bridgeDailyLimits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bridgeDailyUsed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bridgeEmergencyPause: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bridgeLastResetTime: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  calculateNetYield: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        totalDepositedAmount: bigint;
        grossYield: bigint;
        feeAmount: bigint;
        netYield: bigint;
        netYieldRate: bigint;
      }
    ],
    "view"
  >;

  calculateYield: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        totalDepositedAmount: bigint;
        yieldAmount: bigint;
        yieldRate: bigint;
      }
    ],
    "view"
  >;

  cancelPendingRate: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [token: AddressLike, assets: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  exchangeRateStakedToUnderlying: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getAllocations: TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { aave: bigint; morpho: bigint }],
    "view"
  >;

  getBridgeSecurityStatus: TypedContractMethod<
    [bridge: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        dailyLimit: bigint;
        dailyUsed: bigint;
        lastResetTime: bigint;
        isPaused: boolean;
      }
    ],
    "view"
  >;

  getExchangeRate: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getFeeInfo: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, string] & {
        feeRate: bigint;
        accumulatedFeeAmount: bigint;
        totalFeesWithdrawnAmount: bigint;
        recipient: string;
      }
    ],
    "view"
  >;

  getPendingRateInfo: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        pendingRate: bigint;
        startTime: bigint;
        progress: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getProtocolBalances: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        aaveBalance: bigint;
        morphoBalance: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getSecurityStatus: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        maxDailyRate: bigint;
        lastUpdateTime: bigint;
        pendingRate: bigint;
        hasPendingIncrease: boolean;
      }
    ],
    "view"
  >;

  getStakedTokenBalance: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getStakedTokenInfo: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        currentExchangeRate: bigint;
        totalSupply: bigint;
        totalCurrentValue: bigint;
        underlyingDepositedAmount: bigint;
        accumulatedFeeAmount: bigint;
      }
    ],
    "view"
  >;

  getTokenStats: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalStakedSupply: bigint;
        underlyingDepositedAmount: bigint;
        totalWithdrawnAmount: bigint;
        currentValue: bigint;
        currentExchangeRate: bigint;
      }
    ],
    "view"
  >;

  getTotalStakedTokenSupply: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTotalValue: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getUserInfo: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stakedTokenBalance: bigint;
        underlyingValue: bigint;
        currentExchangeRate: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  lastRateUpdateTime: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  lastRecordedValue: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxDailyRateIncrease: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  morphoAllocations: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  morphoVaults: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRateIncrease: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  performanceFeeRate: TypedContractMethod<[], [bigint], "view">;

  previewDeposit: TypedContractMethod<
    [token: AddressLike, underlyingAmount: BigNumberish],
    [bigint],
    "view"
  >;

  previewRedeem: TypedContractMethod<
    [token: AddressLike, stakedTokenAmount: BigNumberish],
    [bigint],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  queueExchangeRateIncrease: TypedContractMethod<
    [token: AddressLike, targetRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  queueTimelockOperation: TypedContractMethod<
    [operationHash: BytesLike],
    [void],
    "nonpayable"
  >;

  rateIncreaseStartTime: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  rebalance: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  receiveFromBridge: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [token: AddressLike, stakedTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAaveConfig: TypedContractMethod<
    [_aavePool: AddressLike, token: AddressLike, aToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setBridgeAuthorization: TypedContractMethod<
    [bridge: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setBridgeEmergencyPause: TypedContractMethod<
    [bridge: AddressLike, paused: boolean],
    [void],
    "nonpayable"
  >;

  setBridgeLimit: TypedContractMethod<
    [bridge: AddressLike, dailyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxRateIncrease: TypedContractMethod<
    [token: AddressLike, maxIncrease: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMorphoVault: TypedContractMethod<
    [token: AddressLike, vault: AddressLike],
    [void],
    "nonpayable"
  >;

  setPerformanceFeeRate: TypedContractMethod<
    [_feeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolAllocations: TypedContractMethod<
    [
      token: AddressLike,
      aavePercentage: BigNumberish,
      morphoPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setSupportedToken: TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  setTimelockDelay: TypedContractMethod<
    [delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  simulateExchangeRateUpdate: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        currentRate: bigint;
        newRate: bigint;
        totalGain: bigint;
        feeAmount: bigint;
        netGain: bigint;
      }
    ],
    "view"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  timelockDelay: TypedContractMethod<[], [bigint], "view">;

  timelockOperations: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  totalDeposited: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalFeesWithdrawn: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  totalStakedTokenSupply: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  totalUnderlyingDeposited: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  totalWithdrawn: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userStakedTokenBalance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdrawAllFees: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawForUser: TypedContractMethod<
    [token: AddressLike, underlyingAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawPerformanceFee: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_RATE_INCREASE_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_withdrawFromAave"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_withdrawFromMorpho"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "aTokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "aaveAllocations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "aavePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accumulatedFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "applyPendingRateImmediately"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedBridges"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeDailyLimits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeDailyUsed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeEmergencyPause"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeLastResetTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateNetYield"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        totalDepositedAmount: bigint;
        grossYield: bigint;
        feeAmount: bigint;
        netYield: bigint;
        netYieldRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateYield"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        totalDepositedAmount: bigint;
        yieldAmount: bigint;
        yieldRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelPendingRate"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [token: AddressLike, assets: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchangeRateStakedToUnderlying"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllocations"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { aave: bigint; morpho: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBridgeSecurityStatus"
  ): TypedContractMethod<
    [bridge: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        dailyLimit: bigint;
        dailyUsed: bigint;
        lastResetTime: bigint;
        isPaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeInfo"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, string] & {
        feeRate: bigint;
        accumulatedFeeAmount: bigint;
        totalFeesWithdrawnAmount: bigint;
        recipient: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingRateInfo"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        pendingRate: bigint;
        startTime: bigint;
        progress: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolBalances"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        aaveBalance: bigint;
        morphoBalance: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSecurityStatus"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        maxDailyRate: bigint;
        lastUpdateTime: bigint;
        pendingRate: bigint;
        hasPendingIncrease: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakedTokenBalance"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakedTokenInfo"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        currentExchangeRate: bigint;
        totalSupply: bigint;
        totalCurrentValue: bigint;
        underlyingDepositedAmount: bigint;
        accumulatedFeeAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenStats"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalStakedSupply: bigint;
        underlyingDepositedAmount: bigint;
        totalWithdrawnAmount: bigint;
        currentValue: bigint;
        currentExchangeRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStakedTokenSupply"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValue"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stakedTokenBalance: bigint;
        underlyingValue: bigint;
        currentExchangeRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastRateUpdateTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRecordedValue"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDailyRateIncrease"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "morphoAllocations"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "morphoVaults"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRateIncrease"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "performanceFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<
    [token: AddressLike, underlyingAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<
    [token: AddressLike, stakedTokenAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "queueExchangeRateIncrease"
  ): TypedContractMethod<
    [token: AddressLike, targetRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queueTimelockOperation"
  ): TypedContractMethod<[operationHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rateIncreaseStartTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receiveFromBridge"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [token: AddressLike, stakedTokenAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAaveConfig"
  ): TypedContractMethod<
    [_aavePool: AddressLike, token: AddressLike, aToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBridgeAuthorization"
  ): TypedContractMethod<
    [bridge: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBridgeEmergencyPause"
  ): TypedContractMethod<
    [bridge: AddressLike, paused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBridgeLimit"
  ): TypedContractMethod<
    [bridge: AddressLike, dailyLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxRateIncrease"
  ): TypedContractMethod<
    [token: AddressLike, maxIncrease: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMorphoVault"
  ): TypedContractMethod<
    [token: AddressLike, vault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPerformanceFeeRate"
  ): TypedContractMethod<[_feeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolAllocations"
  ): TypedContractMethod<
    [
      token: AddressLike,
      aavePercentage: BigNumberish,
      morphoPercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedToken"
  ): TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimelockDelay"
  ): TypedContractMethod<[delay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "simulateExchangeRateUpdate"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        currentRate: bigint;
        newRate: bigint;
        totalGain: bigint;
        feeAmount: bigint;
        netGain: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "timelockDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timelockOperations"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeesWithdrawn"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakedTokenSupply"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUnderlyingDeposited"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userStakedTokenBalance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawAllFees"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawForUser"
  ): TypedContractMethod<
    [token: AddressLike, underlyingAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawPerformanceFee"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AllocationSet"
  ): TypedContractEvent<
    AllocationSetEvent.InputTuple,
    AllocationSetEvent.OutputTuple,
    AllocationSetEvent.OutputObject
  >;
  getEvent(
    key: "BridgeEmergencyPause"
  ): TypedContractEvent<
    BridgeEmergencyPauseEvent.InputTuple,
    BridgeEmergencyPauseEvent.OutputTuple,
    BridgeEmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "BridgeLimitSet"
  ): TypedContractEvent<
    BridgeLimitSetEvent.InputTuple,
    BridgeLimitSetEvent.OutputTuple,
    BridgeLimitSetEvent.OutputObject
  >;
  getEvent(
    key: "ExchangeRateUpdated"
  ): TypedContractEvent<
    ExchangeRateUpdatedEvent.InputTuple,
    ExchangeRateUpdatedEvent.OutputTuple,
    ExchangeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientSet"
  ): TypedContractEvent<
    FeeRecipientSetEvent.InputTuple,
    FeeRecipientSetEvent.OutputTuple,
    FeeRecipientSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxRateIncreaseSet"
  ): TypedContractEvent<
    MaxRateIncreaseSetEvent.InputTuple,
    MaxRateIncreaseSetEvent.OutputTuple,
    MaxRateIncreaseSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeeCollected"
  ): TypedContractEvent<
    PerformanceFeeCollectedEvent.InputTuple,
    PerformanceFeeCollectedEvent.OutputTuple,
    PerformanceFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeeSet"
  ): TypedContractEvent<
    PerformanceFeeSetEvent.InputTuple,
    PerformanceFeeSetEvent.OutputTuple,
    PerformanceFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeeWithdrawn"
  ): TypedContractEvent<
    PerformanceFeeWithdrawnEvent.InputTuple,
    PerformanceFeeWithdrawnEvent.OutputTuple,
    PerformanceFeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolDeposit"
  ): TypedContractEvent<
    ProtocolDepositEvent.InputTuple,
    ProtocolDepositEvent.OutputTuple,
    ProtocolDepositEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolWithdrawalFailed"
  ): TypedContractEvent<
    ProtocolWithdrawalFailedEvent.InputTuple,
    ProtocolWithdrawalFailedEvent.OutputTuple,
    ProtocolWithdrawalFailedEvent.OutputObject
  >;
  getEvent(
    key: "RateIncreaseQueued"
  ): TypedContractEvent<
    RateIncreaseQueuedEvent.InputTuple,
    RateIncreaseQueuedEvent.OutputTuple,
    RateIncreaseQueuedEvent.OutputObject
  >;
  getEvent(
    key: "StakedTokenBurned"
  ): TypedContractEvent<
    StakedTokenBurnedEvent.InputTuple,
    StakedTokenBurnedEvent.OutputTuple,
    StakedTokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "StakedTokenMinted"
  ): TypedContractEvent<
    StakedTokenMintedEvent.InputTuple,
    StakedTokenMintedEvent.OutputTuple,
    StakedTokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockOperationExecuted"
  ): TypedContractEvent<
    TimelockOperationExecutedEvent.InputTuple,
    TimelockOperationExecutedEvent.OutputTuple,
    TimelockOperationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockOperationQueued"
  ): TypedContractEvent<
    TimelockOperationQueuedEvent.InputTuple,
    TimelockOperationQueuedEvent.OutputTuple,
    TimelockOperationQueuedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSupported"
  ): TypedContractEvent<
    TokenSupportedEvent.InputTuple,
    TokenSupportedEvent.OutputTuple,
    TokenSupportedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalDebug"
  ): TypedContractEvent<
    WithdrawalDebugEvent.InputTuple,
    WithdrawalDebugEvent.OutputTuple,
    WithdrawalDebugEvent.OutputObject
  >;

  filters: {
    "AllocationSet(address,uint256,uint256)": TypedContractEvent<
      AllocationSetEvent.InputTuple,
      AllocationSetEvent.OutputTuple,
      AllocationSetEvent.OutputObject
    >;
    AllocationSet: TypedContractEvent<
      AllocationSetEvent.InputTuple,
      AllocationSetEvent.OutputTuple,
      AllocationSetEvent.OutputObject
    >;

    "BridgeEmergencyPause(address,bool)": TypedContractEvent<
      BridgeEmergencyPauseEvent.InputTuple,
      BridgeEmergencyPauseEvent.OutputTuple,
      BridgeEmergencyPauseEvent.OutputObject
    >;
    BridgeEmergencyPause: TypedContractEvent<
      BridgeEmergencyPauseEvent.InputTuple,
      BridgeEmergencyPauseEvent.OutputTuple,
      BridgeEmergencyPauseEvent.OutputObject
    >;

    "BridgeLimitSet(address,uint256)": TypedContractEvent<
      BridgeLimitSetEvent.InputTuple,
      BridgeLimitSetEvent.OutputTuple,
      BridgeLimitSetEvent.OutputObject
    >;
    BridgeLimitSet: TypedContractEvent<
      BridgeLimitSetEvent.InputTuple,
      BridgeLimitSetEvent.OutputTuple,
      BridgeLimitSetEvent.OutputObject
    >;

    "ExchangeRateUpdated(address,uint256,uint256)": TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;
    ExchangeRateUpdated: TypedContractEvent<
      ExchangeRateUpdatedEvent.InputTuple,
      ExchangeRateUpdatedEvent.OutputTuple,
      ExchangeRateUpdatedEvent.OutputObject
    >;

    "FeeRecipientSet(address)": TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;
    FeeRecipientSet: TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxRateIncreaseSet(address,uint256)": TypedContractEvent<
      MaxRateIncreaseSetEvent.InputTuple,
      MaxRateIncreaseSetEvent.OutputTuple,
      MaxRateIncreaseSetEvent.OutputObject
    >;
    MaxRateIncreaseSet: TypedContractEvent<
      MaxRateIncreaseSetEvent.InputTuple,
      MaxRateIncreaseSetEvent.OutputTuple,
      MaxRateIncreaseSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PerformanceFeeCollected(address,uint256)": TypedContractEvent<
      PerformanceFeeCollectedEvent.InputTuple,
      PerformanceFeeCollectedEvent.OutputTuple,
      PerformanceFeeCollectedEvent.OutputObject
    >;
    PerformanceFeeCollected: TypedContractEvent<
      PerformanceFeeCollectedEvent.InputTuple,
      PerformanceFeeCollectedEvent.OutputTuple,
      PerformanceFeeCollectedEvent.OutputObject
    >;

    "PerformanceFeeSet(uint256)": TypedContractEvent<
      PerformanceFeeSetEvent.InputTuple,
      PerformanceFeeSetEvent.OutputTuple,
      PerformanceFeeSetEvent.OutputObject
    >;
    PerformanceFeeSet: TypedContractEvent<
      PerformanceFeeSetEvent.InputTuple,
      PerformanceFeeSetEvent.OutputTuple,
      PerformanceFeeSetEvent.OutputObject
    >;

    "PerformanceFeeWithdrawn(address,uint256,address)": TypedContractEvent<
      PerformanceFeeWithdrawnEvent.InputTuple,
      PerformanceFeeWithdrawnEvent.OutputTuple,
      PerformanceFeeWithdrawnEvent.OutputObject
    >;
    PerformanceFeeWithdrawn: TypedContractEvent<
      PerformanceFeeWithdrawnEvent.InputTuple,
      PerformanceFeeWithdrawnEvent.OutputTuple,
      PerformanceFeeWithdrawnEvent.OutputObject
    >;

    "ProtocolDeposit(address,uint256,string)": TypedContractEvent<
      ProtocolDepositEvent.InputTuple,
      ProtocolDepositEvent.OutputTuple,
      ProtocolDepositEvent.OutputObject
    >;
    ProtocolDeposit: TypedContractEvent<
      ProtocolDepositEvent.InputTuple,
      ProtocolDepositEvent.OutputTuple,
      ProtocolDepositEvent.OutputObject
    >;

    "ProtocolWithdrawalFailed(address,string,uint256,uint256)": TypedContractEvent<
      ProtocolWithdrawalFailedEvent.InputTuple,
      ProtocolWithdrawalFailedEvent.OutputTuple,
      ProtocolWithdrawalFailedEvent.OutputObject
    >;
    ProtocolWithdrawalFailed: TypedContractEvent<
      ProtocolWithdrawalFailedEvent.InputTuple,
      ProtocolWithdrawalFailedEvent.OutputTuple,
      ProtocolWithdrawalFailedEvent.OutputObject
    >;

    "RateIncreaseQueued(address,uint256,uint256)": TypedContractEvent<
      RateIncreaseQueuedEvent.InputTuple,
      RateIncreaseQueuedEvent.OutputTuple,
      RateIncreaseQueuedEvent.OutputObject
    >;
    RateIncreaseQueued: TypedContractEvent<
      RateIncreaseQueuedEvent.InputTuple,
      RateIncreaseQueuedEvent.OutputTuple,
      RateIncreaseQueuedEvent.OutputObject
    >;

    "StakedTokenBurned(address,address,uint256,uint256)": TypedContractEvent<
      StakedTokenBurnedEvent.InputTuple,
      StakedTokenBurnedEvent.OutputTuple,
      StakedTokenBurnedEvent.OutputObject
    >;
    StakedTokenBurned: TypedContractEvent<
      StakedTokenBurnedEvent.InputTuple,
      StakedTokenBurnedEvent.OutputTuple,
      StakedTokenBurnedEvent.OutputObject
    >;

    "StakedTokenMinted(address,address,uint256,uint256)": TypedContractEvent<
      StakedTokenMintedEvent.InputTuple,
      StakedTokenMintedEvent.OutputTuple,
      StakedTokenMintedEvent.OutputObject
    >;
    StakedTokenMinted: TypedContractEvent<
      StakedTokenMintedEvent.InputTuple,
      StakedTokenMintedEvent.OutputTuple,
      StakedTokenMintedEvent.OutputObject
    >;

    "TimelockOperationExecuted(bytes32)": TypedContractEvent<
      TimelockOperationExecutedEvent.InputTuple,
      TimelockOperationExecutedEvent.OutputTuple,
      TimelockOperationExecutedEvent.OutputObject
    >;
    TimelockOperationExecuted: TypedContractEvent<
      TimelockOperationExecutedEvent.InputTuple,
      TimelockOperationExecutedEvent.OutputTuple,
      TimelockOperationExecutedEvent.OutputObject
    >;

    "TimelockOperationQueued(bytes32,uint256)": TypedContractEvent<
      TimelockOperationQueuedEvent.InputTuple,
      TimelockOperationQueuedEvent.OutputTuple,
      TimelockOperationQueuedEvent.OutputObject
    >;
    TimelockOperationQueued: TypedContractEvent<
      TimelockOperationQueuedEvent.InputTuple,
      TimelockOperationQueuedEvent.OutputTuple,
      TimelockOperationQueuedEvent.OutputObject
    >;

    "TokenSupported(address,bool)": TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
    TokenSupported: TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawalDebug(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalDebugEvent.InputTuple,
      WithdrawalDebugEvent.OutputTuple,
      WithdrawalDebugEvent.OutputObject
    >;
    WithdrawalDebug: TypedContractEvent<
      WithdrawalDebugEvent.InputTuple,
      WithdrawalDebugEvent.OutputTuple,
      WithdrawalDebugEvent.OutputObject
    >;
  };
}
