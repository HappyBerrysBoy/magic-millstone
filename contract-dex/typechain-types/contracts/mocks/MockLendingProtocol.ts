/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockLendingProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "annualYieldRate"
      | "claim"
      | "deposit"
      | "deposits"
      | "emergencyWithdraw"
      | "getBalance"
      | "getPrincipal"
      | "getWithdrawStatus"
      | "nextRequestId"
      | "owner"
      | "renounceOwnership"
      | "setAnnualYieldRate"
      | "setWithdrawDelay"
      | "transferOwnership"
      | "withdraw"
      | "withdrawDelay"
      | "withdrawRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositMade"
      | "OwnershipTransferred"
      | "WithdrawClaimed"
      | "WithdrawRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "annualYieldRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrincipal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnnualYieldRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "annualYieldRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnnualYieldRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequests",
    data: BytesLike
  ): Result;
}

export namespace DepositMadeEvent {
  export type InputTuple = [
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, user: string, amount: bigint];
  export interface OutputObject {
    token: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawClaimedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    token: string,
    user: string,
    amount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    token: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    token: string,
    user: string,
    amount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    token: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockLendingProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): MockLendingProtocol;
  waitForDeployment(): Promise<this>;

  interface: MockLendingProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  annualYieldRate: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<
    [token: AddressLike, requestId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposits: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  getPrincipal: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  getWithdrawStatus: TypedContractMethod<
    [requestId: BigNumberish],
    [[boolean, bigint] & { isReady: boolean; claimableTime: bigint }],
    "view"
  >;

  nextRequestId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAnnualYieldRate: TypedContractMethod<
    [_rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawDelay: TypedContractMethod<
    [_delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdrawDelay: TypedContractMethod<[], [bigint], "view">;

  withdrawRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        token: string;
        user: string;
        amount: bigint;
        requestTime: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "annualYieldRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [token: AddressLike, requestId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrincipal"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWithdrawStatus"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [[boolean, bigint] & { isReady: boolean; claimableTime: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAnnualYieldRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawDelay"
  ): TypedContractMethod<[_delay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        token: string;
        user: string;
        amount: bigint;
        requestTime: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DepositMade"
  ): TypedContractEvent<
    DepositMadeEvent.InputTuple,
    DepositMadeEvent.OutputTuple,
    DepositMadeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawClaimed"
  ): TypedContractEvent<
    WithdrawClaimedEvent.InputTuple,
    WithdrawClaimedEvent.OutputTuple,
    WithdrawClaimedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequested"
  ): TypedContractEvent<
    WithdrawRequestedEvent.InputTuple,
    WithdrawRequestedEvent.OutputTuple,
    WithdrawRequestedEvent.OutputObject
  >;

  filters: {
    "DepositMade(address,address,uint256)": TypedContractEvent<
      DepositMadeEvent.InputTuple,
      DepositMadeEvent.OutputTuple,
      DepositMadeEvent.OutputObject
    >;
    DepositMade: TypedContractEvent<
      DepositMadeEvent.InputTuple,
      DepositMadeEvent.OutputTuple,
      DepositMadeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WithdrawClaimed(uint256,address,address,uint256)": TypedContractEvent<
      WithdrawClaimedEvent.InputTuple,
      WithdrawClaimedEvent.OutputTuple,
      WithdrawClaimedEvent.OutputObject
    >;
    WithdrawClaimed: TypedContractEvent<
      WithdrawClaimedEvent.InputTuple,
      WithdrawClaimedEvent.OutputTuple,
      WithdrawClaimedEvent.OutputObject
    >;

    "WithdrawRequested(uint256,address,address,uint256)": TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;
    WithdrawRequested: TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;
  };
}
