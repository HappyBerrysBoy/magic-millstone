/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMorphoBlue {
  export type MarketParamsStruct = {
    loanToken: AddressLike;
    collateralToken: AddressLike;
    oracle: AddressLike;
    irm: AddressLike;
    lltv: BigNumberish;
  };

  export type MarketParamsStructOutput = [
    loanToken: string,
    collateralToken: string,
    oracle: string,
    irm: string,
    lltv: bigint
  ] & {
    loanToken: string;
    collateralToken: string;
    oracle: string;
    irm: string;
    lltv: bigint;
  };

  export type MarketStruct = {
    totalSupplyAssets: BigNumberish;
    totalSupplyShares: BigNumberish;
    totalBorrowAssets: BigNumberish;
    totalBorrowShares: BigNumberish;
    lastUpdate: BigNumberish;
    fee: BigNumberish;
  };

  export type MarketStructOutput = [
    totalSupplyAssets: bigint,
    totalSupplyShares: bigint,
    totalBorrowAssets: bigint,
    totalBorrowShares: bigint,
    lastUpdate: bigint,
    fee: bigint
  ] & {
    totalSupplyAssets: bigint;
    totalSupplyShares: bigint;
    totalBorrowAssets: bigint;
    totalBorrowShares: bigint;
    lastUpdate: bigint;
    fee: bigint;
  };

  export type PositionStruct = {
    supplyShares: BigNumberish;
    borrowShares: BigNumberish;
    collateral: BigNumberish;
  };

  export type PositionStructOutput = [
    supplyShares: bigint,
    borrowShares: bigint,
    collateral: bigint
  ] & { supplyShares: bigint; borrowShares: bigint; collateral: bigint };
}

export interface IMorphoBlueInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accrueInterest"
      | "borrow"
      | "id"
      | "isMarketCreated"
      | "market"
      | "position"
      | "repay"
      | "supply"
      | "supplyCollateral"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrow"
      | "Repay"
      | "Supply"
      | "SupplyCollateral"
      | "Withdraw"
      | "WithdrawCollateral"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accrueInterest",
    values: [IMorphoBlue.MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      IMorphoBlue.MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "id",
    values: [IMorphoBlue.MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "market", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "position",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      IMorphoBlue.MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [
      IMorphoBlue.MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCollateral",
    values: [
      IMorphoBlue.MarketParamsStruct,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      IMorphoBlue.MarketParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BorrowEvent {
  export type InputTuple = [
    id: BytesLike,
    borrower: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    borrower: string,
    onBehalf: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    borrower: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    id: BytesLike,
    repayer: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    repayer: string,
    onBehalf: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    repayer: string;
    onBehalf: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [
    id: BytesLike,
    supplier: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    supplier: string,
    onBehalf: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    supplier: string;
    onBehalf: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyCollateralEvent {
  export type InputTuple = [
    id: BytesLike,
    supplier: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    supplier: string,
    onBehalf: string,
    assets: bigint
  ];
  export interface OutputObject {
    id: string;
    supplier: string;
    onBehalf: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    id: BytesLike,
    supplier: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    supplier: string,
    onBehalf: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    supplier: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawCollateralEvent {
  export type InputTuple = [
    id: BytesLike,
    supplier: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    supplier: string,
    onBehalf: string,
    receiver: string,
    assets: bigint
  ];
  export interface OutputObject {
    id: string;
    supplier: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMorphoBlue extends BaseContract {
  connect(runner?: ContractRunner | null): IMorphoBlue;
  waitForDeployment(): Promise<this>;

  interface: IMorphoBlueInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accrueInterest: TypedContractMethod<
    [marketParams: IMorphoBlue.MarketParamsStruct],
    [void],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsBorrowed: bigint; sharesBorrowed: bigint }],
    "nonpayable"
  >;

  id: TypedContractMethod<
    [marketParams: IMorphoBlue.MarketParamsStruct],
    [string],
    "view"
  >;

  isMarketCreated: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  market: TypedContractMethod<
    [id: BytesLike],
    [IMorphoBlue.MarketStructOutput],
    "view"
  >;

  position: TypedContractMethod<
    [id: BytesLike, user: AddressLike],
    [IMorphoBlue.PositionStructOutput],
    "view"
  >;

  repay: TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { assetsRepaid: bigint; sharesRepaid: bigint }],
    "nonpayable"
  >;

  supply: TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { assetsSupplied: bigint; sharesSupplied: bigint }],
    "nonpayable"
  >;

  supplyCollateral: TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsWithdrawn: bigint; sharesWithdrawn: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<
    [marketParams: IMorphoBlue.MarketParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsBorrowed: bigint; sharesBorrowed: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "id"
  ): TypedContractMethod<
    [marketParams: IMorphoBlue.MarketParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMarketCreated"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<
    [id: BytesLike],
    [IMorphoBlue.MarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "position"
  ): TypedContractMethod<
    [id: BytesLike, user: AddressLike],
    [IMorphoBlue.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { assetsRepaid: bigint; sharesRepaid: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { assetsSupplied: bigint; sharesSupplied: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyCollateral"
  ): TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      marketParams: IMorphoBlue.MarketParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsWithdrawn: bigint; sharesWithdrawn: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "SupplyCollateral"
  ): TypedContractEvent<
    SupplyCollateralEvent.InputTuple,
    SupplyCollateralEvent.OutputTuple,
    SupplyCollateralEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawCollateral"
  ): TypedContractEvent<
    WithdrawCollateralEvent.InputTuple,
    WithdrawCollateralEvent.OutputTuple,
    WithdrawCollateralEvent.OutputObject
  >;

  filters: {
    "Borrow(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Repay(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "Supply(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "SupplyCollateral(bytes32,address,address,uint256)": TypedContractEvent<
      SupplyCollateralEvent.InputTuple,
      SupplyCollateralEvent.OutputTuple,
      SupplyCollateralEvent.OutputObject
    >;
    SupplyCollateral: TypedContractEvent<
      SupplyCollateralEvent.InputTuple,
      SupplyCollateralEvent.OutputTuple,
      SupplyCollateralEvent.OutputObject
    >;

    "Withdraw(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawCollateral(bytes32,address,address,address,uint256)": TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
    WithdrawCollateral: TypedContractEvent<
      WithdrawCollateralEvent.InputTuple,
      WithdrawCollateralEvent.OutputTuple,
      WithdrawCollateralEvent.OutputObject
    >;
  };
}
