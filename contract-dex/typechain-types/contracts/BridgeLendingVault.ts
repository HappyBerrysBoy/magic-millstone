/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BridgeLendingVault {
  export type WithdrawRequestStruct = {
    token: AddressLike;
    amount: BigNumberish;
    requestTime: BigNumberish;
    protocolRequestId: BigNumberish;
    claimed: boolean;
    requester: AddressLike;
  };

  export type WithdrawRequestStructOutput = [
    token: string,
    amount: bigint,
    requestTime: bigint,
    protocolRequestId: bigint,
    claimed: boolean,
    requester: string
  ] & {
    token: string;
    amount: bigint;
    requestTime: bigint;
    protocolRequestId: bigint;
    claimed: boolean;
    requester: string;
  };
}

export interface BridgeLendingVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "authorizedBridges"
      | "calculateYield"
      | "claimWithdraw"
      | "emergencyWithdraw"
      | "getTokenBalance"
      | "getTokenStats"
      | "getUserWithdrawRequests"
      | "getWithdrawRequestInfo"
      | "initialize"
      | "lendingProtocols"
      | "nextRequestId"
      | "owner"
      | "pause"
      | "paused"
      | "principalSnapshots"
      | "proxiableUUID"
      | "receiveFromBridge"
      | "renounceOwnership"
      | "requestWithdraw"
      | "setBridgeAuthorization"
      | "setLendingProtocol"
      | "setSupportedToken"
      | "supportedTokens"
      | "totalDeposited"
      | "totalWithdrawn"
      | "transferOwnership"
      | "unpause"
      | "updateYieldSnapshot"
      | "upgradeToAndCall"
      | "userWithdrawRequests"
      | "withdrawRequests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeAuthorized"
      | "Initialized"
      | "LendingProtocolSet"
      | "OwnershipTransferred"
      | "Paused"
      | "TokenDeposited"
      | "TokenReceived"
      | "TokenSupported"
      | "Unpaused"
      | "Upgraded"
      | "WithdrawClaimed"
      | "WithdrawRequested"
      | "YieldCalculated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBridges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYield",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawRequestInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingProtocols",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "principalSnapshots",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFromBridge",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingProtocol",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateYieldSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawRequests",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawRequestInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "principalSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFromBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateYieldSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequests",
    data: BytesLike
  ): Result;
}

export namespace BridgeAuthorizedEvent {
  export type InputTuple = [bridge: AddressLike, authorized: boolean];
  export type OutputTuple = [bridge: string, authorized: boolean];
  export interface OutputObject {
    bridge: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingProtocolSetEvent {
  export type InputTuple = [token: AddressLike, protocol: AddressLike];
  export type OutputTuple = [token: string, protocol: string];
  export interface OutputObject {
    token: string;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDepositedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    protocol: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, protocol: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenReceivedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    from: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, from: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSupportedEvent {
  export type InputTuple = [token: AddressLike, supported: boolean];
  export type OutputTuple = [token: string, supported: boolean];
  export interface OutputObject {
    token: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawClaimedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    token: string,
    amount: bigint,
    requester: string
  ];
  export interface OutputObject {
    requestId: bigint;
    token: string;
    amount: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    requester: AddressLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    token: string,
    amount: bigint,
    requester: string
  ];
  export interface OutputObject {
    requestId: bigint;
    token: string;
    amount: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldCalculatedEvent {
  export type InputTuple = [
    token: AddressLike,
    totalValue: BigNumberish,
    principal: BigNumberish,
    yield_: BigNumberish,
    yieldRate: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    totalValue: bigint,
    principal: bigint,
    yield_: bigint,
    yieldRate: bigint
  ];
  export interface OutputObject {
    token: string;
    totalValue: bigint;
    principal: bigint;
    yield: bigint;
    yieldRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BridgeLendingVault extends BaseContract {
  connect(runner?: ContractRunner | null): BridgeLendingVault;
  waitForDeployment(): Promise<this>;

  interface: BridgeLendingVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  authorizedBridges: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  calculateYield: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        principal: bigint;
        yieldAmount: bigint;
        yieldRate: bigint;
      }
    ],
    "view"
  >;

  claimWithdraw: TypedContractMethod<
    [requestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTokenBalance: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        contractBalance: bigint;
        protocolBalance: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getTokenStats: TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { deposited: bigint; withdrawn: bigint }],
    "view"
  >;

  getUserWithdrawRequests: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getWithdrawRequestInfo: TypedContractMethod<
    [requestId: BigNumberish],
    [
      [BridgeLendingVault.WithdrawRequestStructOutput, boolean, bigint] & {
        request: BridgeLendingVault.WithdrawRequestStructOutput;
        isReady: boolean;
        claimableTime: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  lendingProtocols: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  nextRequestId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  principalSnapshots: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  receiveFromBridge: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setBridgeAuthorization: TypedContractMethod<
    [bridge: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setLendingProtocol: TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupportedToken: TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  totalDeposited: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalWithdrawn: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateYieldSnapshot: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userWithdrawRequests: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, string] & {
        token: string;
        amount: bigint;
        requestTime: bigint;
        protocolRequestId: bigint;
        claimed: boolean;
        requester: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorizedBridges"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateYield"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalValue: bigint;
        principal: bigint;
        yieldAmount: bigint;
        yieldRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimWithdraw"
  ): TypedContractMethod<[requestId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        contractBalance: bigint;
        protocolBalance: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenStats"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { deposited: bigint; withdrawn: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserWithdrawRequests"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWithdrawRequestInfo"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [
      [BridgeLendingVault.WithdrawRequestStructOutput, boolean, bigint] & {
        request: BridgeLendingVault.WithdrawRequestStructOutput;
        isReady: boolean;
        claimableTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lendingProtocols"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nextRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "principalSnapshots"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveFromBridge"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBridgeAuthorization"
  ): TypedContractMethod<
    [bridge: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLendingProtocol"
  ): TypedContractMethod<
    [token: AddressLike, protocol: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupportedToken"
  ): TypedContractMethod<
    [token: AddressLike, supported: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateYieldSnapshot"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userWithdrawRequests"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean, string] & {
        token: string;
        amount: bigint;
        requestTime: bigint;
        protocolRequestId: bigint;
        claimed: boolean;
        requester: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "BridgeAuthorized"
  ): TypedContractEvent<
    BridgeAuthorizedEvent.InputTuple,
    BridgeAuthorizedEvent.OutputTuple,
    BridgeAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LendingProtocolSet"
  ): TypedContractEvent<
    LendingProtocolSetEvent.InputTuple,
    LendingProtocolSetEvent.OutputTuple,
    LendingProtocolSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeposited"
  ): TypedContractEvent<
    TokenDepositedEvent.InputTuple,
    TokenDepositedEvent.OutputTuple,
    TokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokenReceived"
  ): TypedContractEvent<
    TokenReceivedEvent.InputTuple,
    TokenReceivedEvent.OutputTuple,
    TokenReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSupported"
  ): TypedContractEvent<
    TokenSupportedEvent.InputTuple,
    TokenSupportedEvent.OutputTuple,
    TokenSupportedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawClaimed"
  ): TypedContractEvent<
    WithdrawClaimedEvent.InputTuple,
    WithdrawClaimedEvent.OutputTuple,
    WithdrawClaimedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequested"
  ): TypedContractEvent<
    WithdrawRequestedEvent.InputTuple,
    WithdrawRequestedEvent.OutputTuple,
    WithdrawRequestedEvent.OutputObject
  >;
  getEvent(
    key: "YieldCalculated"
  ): TypedContractEvent<
    YieldCalculatedEvent.InputTuple,
    YieldCalculatedEvent.OutputTuple,
    YieldCalculatedEvent.OutputObject
  >;

  filters: {
    "BridgeAuthorized(address,bool)": TypedContractEvent<
      BridgeAuthorizedEvent.InputTuple,
      BridgeAuthorizedEvent.OutputTuple,
      BridgeAuthorizedEvent.OutputObject
    >;
    BridgeAuthorized: TypedContractEvent<
      BridgeAuthorizedEvent.InputTuple,
      BridgeAuthorizedEvent.OutputTuple,
      BridgeAuthorizedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LendingProtocolSet(address,address)": TypedContractEvent<
      LendingProtocolSetEvent.InputTuple,
      LendingProtocolSetEvent.OutputTuple,
      LendingProtocolSetEvent.OutputObject
    >;
    LendingProtocolSet: TypedContractEvent<
      LendingProtocolSetEvent.InputTuple,
      LendingProtocolSetEvent.OutputTuple,
      LendingProtocolSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TokenDeposited(address,uint256,address)": TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
    TokenDeposited: TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;

    "TokenReceived(address,uint256,address)": TypedContractEvent<
      TokenReceivedEvent.InputTuple,
      TokenReceivedEvent.OutputTuple,
      TokenReceivedEvent.OutputObject
    >;
    TokenReceived: TypedContractEvent<
      TokenReceivedEvent.InputTuple,
      TokenReceivedEvent.OutputTuple,
      TokenReceivedEvent.OutputObject
    >;

    "TokenSupported(address,bool)": TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
    TokenSupported: TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawClaimed(uint256,address,uint256,address)": TypedContractEvent<
      WithdrawClaimedEvent.InputTuple,
      WithdrawClaimedEvent.OutputTuple,
      WithdrawClaimedEvent.OutputObject
    >;
    WithdrawClaimed: TypedContractEvent<
      WithdrawClaimedEvent.InputTuple,
      WithdrawClaimedEvent.OutputTuple,
      WithdrawClaimedEvent.OutputObject
    >;

    "WithdrawRequested(uint256,address,uint256,address)": TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;
    WithdrawRequested: TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;

    "YieldCalculated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      YieldCalculatedEvent.InputTuple,
      YieldCalculatedEvent.OutputTuple,
      YieldCalculatedEvent.OutputObject
    >;
    YieldCalculated: TypedContractEvent<
      YieldCalculatedEvent.InputTuple,
      YieldCalculatedEvent.OutputTuple,
      YieldCalculatedEvent.OutputObject
    >;
  };
}
