{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xAA6FA3aB00c789C730a2a84383f63C435994cc2E",
      "kind": "uups"
    }
  ],
  "impls": {
    "6eadedf0488804deb0baf807cf1364c3566ab6d70de128cb590a9121b86458e8": {
      "address": "0x5CE5c8f540C4233075A90af3E7722f015E792453",
      "layout": {
        "solcVersion": "0.8.24",
        "storage": [
          {
            "label": "usdt",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)4272",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:27"
          },
          {
            "label": "mmUSDTToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(mmUSDT)12831",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:28"
          },
          {
            "label": "withdrawNFT",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(WithdrawNFT)12493",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:29"
          },
          {
            "label": "totalDeposited",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:31"
          },
          {
            "label": "totalWithdrawn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:32"
          },
          {
            "label": "bridgeBalance",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:33"
          },
          {
            "label": "exchangeRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:34"
          },
          {
            "label": "userDeposits",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:40"
          },
          {
            "label": "userWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:41"
          },
          {
            "label": "withdrawRequests",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_struct(WithdrawRequest)10699_storage)",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:54"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)40_storage",
            "contract": "VaultContract",
            "src": "contracts/VaultContract.sol:472"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)26_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)36_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(InitializableStorage)147_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(PausableStorage)826_storage": {
            "label": "struct PausableUpgradeable.PausableStorage",
            "members": [
              {
                "label": "_paused",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)890_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)26_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]",
            "numberOfBytes": "1280"
          },
          "t_contract(IERC20)4272": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(WithdrawNFT)12493": {
            "label": "contract WithdrawNFT",
            "numberOfBytes": "20"
          },
          "t_contract(mmUSDT)12831": {
            "label": "contract mmUSDT",
            "numberOfBytes": "20"
          },
          "t_enum(WithdrawStatus)10687": {
            "label": "enum VaultContract.WithdrawStatus",
            "members": [
              "PENDING",
              "READY"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(WithdrawRequest)10699_storage)": {
            "label": "mapping(uint256 => struct VaultContract.WithdrawRequest)",
            "numberOfBytes": "32"
          },
          "t_struct(WithdrawRequest)10699_storage": {
            "label": "struct VaultContract.WithdrawRequest",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "requestTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "readyTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "status",
                "type": "t_enum(WithdrawStatus)10687",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "requester",
                "type": "t_address",
                "offset": 1,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)26_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:62",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
